//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""CarControllerAM"",
            ""id"": ""67665635-0343-41d6-ae16-e532e0670423"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0dd4102e-5d13-4cf6-9639-96fc660fba86"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""22ba6764-e7c3-4216-a766-a144c0871180"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1a8dc501-443f-485b-8882-3b2727b331fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""f99398ba-06d8-4d9b-805d-ec6889f17611"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2d9869c-d327-4c54-974a-1ada9614d0d1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dafac05d-84b5-4b8a-ac1e-c24ffe0cf704"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e27dc262-cf70-4e81-9879-01902113d79f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5717c6ac-7faf-490e-a3af-44205cbf6bda"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ebe9271b-e9b3-4d87-b583-abfba209a06e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""56435966-33cf-4f7e-88e3-81f3ddf44835"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ce929c8b-e8e8-4254-a812-13da4a9cfbb0"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c44eb621-af71-478c-8c7a-49dec9dd0d6a"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40905161-7ca0-4567-b596-270517dfce4f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29afc552-3f20-428b-a227-2ef698fa6d1f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""220ca148-21f7-4c39-96ef-5abadc5d013b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62ec3d82-885e-4dd9-97e0-cf0496897893"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CarControllerAM
        m_CarControllerAM = asset.FindActionMap("CarControllerAM", throwIfNotFound: true);
        m_CarControllerAM_Move = m_CarControllerAM.FindAction("Move", throwIfNotFound: true);
        m_CarControllerAM_Boost = m_CarControllerAM.FindAction("Boost", throwIfNotFound: true);
        m_CarControllerAM_Jump = m_CarControllerAM.FindAction("Jump", throwIfNotFound: true);
        m_CarControllerAM_Spin = m_CarControllerAM.FindAction("Spin", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarControllerAM
    private readonly InputActionMap m_CarControllerAM;
    private ICarControllerAMActions m_CarControllerAMActionsCallbackInterface;
    private readonly InputAction m_CarControllerAM_Move;
    private readonly InputAction m_CarControllerAM_Boost;
    private readonly InputAction m_CarControllerAM_Jump;
    private readonly InputAction m_CarControllerAM_Spin;
    public struct CarControllerAMActions
    {
        private @InputAsset m_Wrapper;
        public CarControllerAMActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CarControllerAM_Move;
        public InputAction @Boost => m_Wrapper.m_CarControllerAM_Boost;
        public InputAction @Jump => m_Wrapper.m_CarControllerAM_Jump;
        public InputAction @Spin => m_Wrapper.m_CarControllerAM_Spin;
        public InputActionMap Get() { return m_Wrapper.m_CarControllerAM; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarControllerAMActions set) { return set.Get(); }
        public void SetCallbacks(ICarControllerAMActions instance)
        {
            if (m_Wrapper.m_CarControllerAMActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnMove;
                @Boost.started -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnBoost;
                @Jump.started -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnJump;
                @Spin.started -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnSpin;
                @Spin.performed -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnSpin;
                @Spin.canceled -= m_Wrapper.m_CarControllerAMActionsCallbackInterface.OnSpin;
            }
            m_Wrapper.m_CarControllerAMActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Spin.started += instance.OnSpin;
                @Spin.performed += instance.OnSpin;
                @Spin.canceled += instance.OnSpin;
            }
        }
    }
    public CarControllerAMActions @CarControllerAM => new CarControllerAMActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICarControllerAMActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSpin(InputAction.CallbackContext context);
    }
}
